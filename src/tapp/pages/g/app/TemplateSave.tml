<html t:type="layout" xmlns:t="http://tapestry.apache.org/schema/tapestry_5_0_0.xsd" xmlns:sec="http://www.springframework.org/security/tags">
 <head>
 <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
 <title>Library</title>
 <script src="/jquery/jquery-1.3.2.min.js"></script>
 <script type="text/javascript">
 <![CDATA[
 	var keepHtml = false;
 	var xhr2 = requestObject();	//new XMLHttpRequest();
 	function requestObject() {
		if(window.XMLHttpRequest)
			return new XMLHttpRequest();
		else if(window.ActiveXObject)
			return new ActiveXObject("Msxml2.XMLHTTP");
		else
			throw new Error("Could not create HTTP request object (XHR Level 2).");
 	}
	function strip(html) {
	   var tmp = document.createElement("DIV");
	   tmp.innerHTML = html;
	   return tmp.innerText||tmp.textContent;
	}
	function nl2br(text) {
		var retVal = '';
		retVal = text.replace(/(\r\n|\n|\r)/gm, '_NL_');	//thanks to http://www.textfixer.com/tutorials/javascript-line-breaks.php
		retVal = retVal.replace(/[\x00-\x1F\x80-\xFF]/g, "");
		return retVal;
	}
	/** http://www.mustbebuilt.co.uk/2012/04/20/replaceall-function-for-javascript-and-actionscript/ */
	function replaceAll(oldStr, removeStr, replaceStr, caseSenitivity){
	    if(caseSenitivity == 1){
	        cs = "g";
	        }else{
	        cs = "gi";
	    }
	    var myPattern=new RegExp(removeStr,cs);
	    newStr =oldStr.replace(myPattern,replaceStr);
	    return newStr;
	}
 	function handlePrimaryKey(text) {
 		var retVal = text;
 		if(text != undefined) {
//			retVal = replaceAll(retVal, "5F", '_');
//			retVal = replaceAll(retVal, "2D", '-');
			retVal = replaceAll(retVal, '\\.', "_DOT_");
 			retVal = encodeURIComponent(retVal);	//http://xkr.us/articles/javascript/encode-compare/
 		}
 		return retVal;
 	}
 	function handleText(text) {
 		//alert('handleText = '+text);
 		var retVal = text;
 		if(text != undefined) {
 			retVal = encodeURIComponent(retVal);	//http://xkr.us/articles/javascript/encode-compare/
			if(!keepHtml) {
				retVal = strip(retVal);
			}
// 			retVal = nl2br(retVal);									//backend is using urldecode(text)
//			retVal = retVal.replace(/[^%<>!,"'\/:\.\w]+/g, " ");	//backend is using urldecode(text)
 		}
 		return retVal;
 	}
	function saveSettings() {
		jQuery("input.bck").attr("disabled","disabled");
	
		//alert('saveSettings start');
	    localStorage.host = jQuery('#host').text();
	    localStorage.appid = jQuery('#appid').text();
	    var target = handleStringWithSpace(jQuery('#what').val());
		//alert('target = ' + target);
		//alert('2 target ' + target + " jQuery('#what').text() " + jQuery('#what').text() + " jQuery('#what').val() " + jQuery('#what').val());
	    if(target.indexOf(':') != -1) {
		    var whatCategory = target.split(":");
		    localStorage.what = whatCategory[0]+'-'+whatCategory[1]+'-'+jQuery('#appid').text();
		    localStorage.category = whatCategory[1];
	    } else {
		    localStorage.what = target+'--'+jQuery('#appid').text();
		    localStorage.category = "";
	    }
	    localStorage.what = handlePrimaryKey(localStorage.what);
	    localStorage.category = handleText(localStorage.category);
	    localStorage.details = handleText(jQuery('#details').val());
	    localStorage.updated = jQuery('#lastUpdatedDate').val();
		//alert('saveSettings end');
	}
	function resetSettings() {
	    localStorage.clear();
	    //alert('settings cleared');
		jQuery("input.bck").attr("disabled","");
	}
	function normalBackup() {
		saveSettings();
		//alert(localStorage.host);
		post_to_url("https://"+localStorage.host+"/api/router-ge.php", {
			'appId': localStorage.appid, 'what': localStorage.what, 'category': localStorage.category,
			'details': localStorage.details
		});
		resetSettings();
	}
	function handleStringWithSpace(text) {
		retVal = text.replace(/ /g, "_");
		return retVal;
	}
	function xhrBackup() {
		saveSettings();
		//alert("xhrBackup host '" + localStorage.host + "' 'appId':"+ localStorage.appid + ", 'what':" + localStorage.what+", 'category':"+ localStorage.category+", 'details':"+ localStorage.details);
		post_to_urlXHR("https://"+localStorage.host+"/api/router-ge.php", {
			'appId': localStorage.appid, 'what': localStorage.what, 'category': localStorage.category,
			'details': localStorage.details
		});
		resetSettings();
	}
 	/* source: http://stackoverflow.com/questions/298745/how-do-i-send-a-cross-domain-post-request-via-javascript/7605119#7605119 */
 	function post_to_url(url, params) {
    	var form = document.createElement('form');
    	form.action = url;
    	form.method = 'POST';

    	for (var i in params) {
        	if (params.hasOwnProperty(i)) {
            	var input = document.createElement('input');
            	input.type = 'hidden';
            	input.name = i;
            	input.value = params[i];
            	//alert("k '" + input.name + "' v '" + input.value + "'");
            	form.appendChild(input);
        	}
    	}
    	form.submit();
 	}
 	function handleSendError(xhr2, url) {
		//alert("handleSendError xhr2.status = " + xhr2.status);
//  		if(xhr2.status != 0) { 
  			if(xhr2.status != 200) {
  				alert("Error: Not able to backup properly with '"+url+"' , status: " + xhr2.status + " statusText: " + xhr2.statusText); //not ok
  			}
//  		}
 	}
	function handleResponse(xhr2) {
		//alert("handleReponse xhr2.status = " + xhr2.status + " .readyState " + xhr2.readyState);
	  	if (xhr2.readyState == 4) {
	  		if(xhr2.status == 200) {
	  			alert("Reponse is ok, status text: " + xhr2.statusText);	//ok
	  		} else {
	  			alert("Response: Not able to backup properly, response: " + xhr2.statusText); //not ok
	  		}
	  	}
	}
	function post_to_urlXHR(url, params) {
		var formObject = new FormData();
		for (var i in params) {
			formObject.append(i,params[i]);
    	}
  
//async does not seems to work (callback does not happen correctly or at all on some device!)
//		xhr2.onerror = handleSendError(xhr2, url);	//does not work, seems like the status is always 0
//		xhr2.onreadystatechange = handleResponse(xhr2);
//		xhr2.open("POST", url, true);	//true for asynchronous
		xhr2.open("POST", url, false);
		xhr2.send(formObject);
		if (xhr2.status == 200) {
		    //alert("The request succeeded!\n\n" +
		    //"The child nodes: " + xhr2.responseXML.documentElement.childNodes.length + " " +
		    //"Response:\n\n" + xhr2.responseText);
		    if(xhr2.responseText.indexOf('success') != -1) {
		    	alert("Completed!\n\nResponse:\n\n" + xhr2.responseText);
				jQuery('#form').submit();
			}
		} else {
		    alert("Failed!\n\nThe response status was: " + xhr2.status + " " + xhr2.statusText + ".");
	    }
    }
 	function backupSave() {
 		//alert('backupSave');
		saveSettings();
		xhrBackup();
		resetSettings();
	}
 	function backupOnly() {
		saveSettings();
		normalBackup();
		resetSettings();
	}
	jQuery(document).ready(function(){
//		jQuery('#form').bind('submit', function() { 
//			alert('User clicked submit');
//			backup();
			resetSettings();
			saveSettings();
			jQuery("input.bck").attr("disabled","");
//		});
	});
 ]]>
 </script>
 </head>
 <body>
	<div style="margin:10px 5px 5px 2px;height:115px;">
   		AppId [<span id="appid">${uniqueSID}</span>] What [<span id="uniqueWhat">${uniqueWhat}</span>] Category [<span id="uniqueCategory">${uniqueCategory}</span>] Backup Service [<span id="host">${backupServiceHost}</span>]&#160;<a href="https://${backupServiceHost}/api/index.php/Genius/${uniqueWhat}-${uniqueCategory}-${uniqueSID}.xml">XML</a>&#160;<a href="https://${backupServiceHost}/api/index.php/Genius/${uniqueWhat}-${uniqueCategory}-${uniqueSID}.html">HTML</a>&#160;<a href="https://${backupServiceHost}/api/index.php/Genius/${uniqueWhat}-${uniqueCategory}-${uniqueSID}.txt">TXT</a>&#160;:
	   	<iframe style="width:100%;height:65px;" id="url_iframe" name="url_iframe" src="https://${backupServiceHost}/api/index.php/Genius/${uniqueWhat}-${uniqueCategory}-${uniqueSID}.xml"></iframe>
		<label for="backup1_1">Normal Backup:&#160;</label>
			<input class="bck" type="button" name="backup1_1" id="backup1_1" value="Backup" onclick="keepHtml = false; backupOnly();" style="width:15%;"/>&#160;&#160;
			<input class="bck" type="button" name="backup1_2" id="backup1_2" value="Backup+Tags" onclick="keepHtml = true; backupOnly();" style="width:15%;" />&#160;&#160;
		<label for="backup2_1">AJAX Backup:&#160;</label>
			<input class="bck" type="button" name="backup2_1" id="backup2_1" value="Backup+Save" onclick="keepHtml = false; backupSave();" style="width:15%;" />&#160;&#160;
			<input class="bck" type="button" name="backup2_2" id="backup2_2" value="Backup+Save+Tags" onclick="keepHtml = true; backupSave();" style="width:15%;" />
 	</div>
	<form t:id="form" t:type="beaneditform" object="template" exclude="platform,createdDate" action="POST">
 		<t:parameter name="id">
 			<!--
	 		<label t:type="Label" for="id"/>
	 		<input t:type="TextField" t:id="id" t:value="template.id" />
 			* used as unique identifier in the system
 			-->
 			${template.id}
 		</t:parameter>
 		<t:parameter name="similarity">
 			Similarity Pattern: ${template.similarity}
 		</t:parameter>
 		<t:parameter name="wordcount">
 			Word Count: ${template.wordcount}
 		</t:parameter>
 		<t:parameter name="frequencycount">
 			Frequency Count: ${template.frequencycount}
 		</t:parameter>
 		<t:parameter name="platform">
	 		<label t:type="Label" for="platform"/>
	 		<input t:type="TextField" t:id="platform" t:value="template.platform" />
 			* e.g. platform, classification or plain category
 		</t:parameter>
 		<t:parameter name="what">
	 		<label t:type="Label" for="what"/>
	 		<input style="width:35%;" t:type="TextField" t:id="what" t:value="template.what" />
 			* primary key and must be unique
 		</t:parameter>
 		<t:parameter name="details">
	 		<label t:type="Label" for="details"/>
	 		<input t:type="TextArea" style="width:60%;height:290px;" t:mixins="maxlength" max="500" t:id="details" t:value="template.details" />
 		</t:parameter>
 		<t:parameter name="lastUpdatedDate">
 			Last updated: ${template.lastUpdatedDate}
 		</t:parameter>
 		<t:parameter name="lastAccessedDate">
 			Last client access: ${template.lastAccessedDate}
 		</t:parameter>
 	</form>
 </body>
</html>