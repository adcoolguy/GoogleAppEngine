package tapp.services;

import java.io.IOException;
import java.lang.reflect.InvocationTargetException;

import org.apache.tapestry5.internal.services.ApplicationGlobalsImpl;
import org.apache.tapestry5.ioc.ServiceBinder;
import org.apache.tapestry5.ioc.annotations.Inject;
import org.apache.tapestry5.services.ApplicationGlobals;
import org.apache.tapestry5.services.Request;
import org.apache.wicket.protocol.http.WebApplication;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.AnnotationConfiguration;
import org.hibernate.cfg.Configuration;
import org.hibernate.impl.SessionFactoryImpl;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.orm.hibernate3.LocalSessionFactoryBean;
import org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean;
import org.wicketopia.persistence.PersistenceProvider;
import org.wicketopia.persistence.hibernate.HibernatePersistenceProvider;
import org.wicketopia.persistence.jpa.JpaPersistenceProvider;
import org.wicketopia.persistence.model.repeater.PersistenceDataProvider;

import com.appspot.cloudserviceapi.data.AppEngine;
import com.appspot.cloudserviceapi.eo.test.ClassPathUpdater;
import com.google.inject.Guice;
import com.google.inject.Injector;

import wicket.WicketApplication;
import org.apache.tapestry5.services.ApplicationGlobals;

public class IocModule {

//	@Inject
//	private static Request request;
	
    //private static final Logger log = Logger.getLogger(IocModule.class.getName());
	
	public static void bind(ServiceBinder binder) {
	    binder.bind(WebApplication.class, WicketApplication.class);

	    boolean production = false;
	    production = AppEngine.isProduction(null);
	    //=== uncomment the following to forcefully test bigtable datastore locally
	    production = true;
	    System.out.println("GAEJ production mode is " + production);
	    if(production) {
//	    	binder.bind(PersistenceProvider.class, JpaPersistenceProvider.class);
//		    JpaPersistenceProvider persistenceProvider = new JpaPersistenceProvider();
	        Injector injector = Guice.createInjector();
	        PersistenceProvider pp = injector.getInstance(PersistenceProvider.class);
		    PersistenceDataProvider.setPersistenceProvider(pp);
	        
	    	System.out.println("JPA BigTable");
	    } else {
	    	binder.bind(PersistenceProvider.class, HibernatePersistenceProvider.class);
	    	ApplicationContext ctx = new ClassPathXmlApplicationContext(new String[] {"application-context.xml","beans.xml"});
	    	WicketApplication.setAppContext(ctx);
	    	System.out.println("Hibernate Local");
	    }
	    
	    System.out.println("IocModule bind() done.");
	}

}
