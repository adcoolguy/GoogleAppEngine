/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package com.ypg.db.dao.gae;


import java.sql.Date;
import java.util.ArrayList;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.spoledge.audao.db.dao.DaoException;
import com.spoledge.audao.db.dao.gae.GaeAbstractDaoImpl;
import com.ypg.db.dao.PartnerDao;
import com.ypg.db.dto.Partner;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class PartnerDaoImpl extends GaeAbstractDaoImpl<Partner> implements PartnerDao {

    private static final String TABLE_NAME = "Partner";

    public PartnerDaoImpl( DatastoreService ds ) {
        super( ds );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public Partner findByPrimaryKey( long id ) {
        Entity _ent = entityGet( new KeyFactory.Builder( "Partner", id ).getKey());

        return _ent != null ? fetch( null, _ent ) : null;
    }

    /**
     * Finds a record.
     */
    public Partner findById( long id ) {
        Query _query = getQuery();
        _query.addFilter( "id", Query.FilterOperator.EQUAL, id );

        return findOne( _query, "id = :1", 0, id);
    }

    /**
     * Finds records ordered by id.
     */
    public Partner[] findAll( ) {
        Query _query = getQuery();

        multipleQueries = false;
        String _cond = "1 = 1";

        return findManyArray( _query, _cond, 0, -1 );
    }

    /**
     * Deletes a record identified by its primary key.
     * @return true iff the record was really deleted (existed)
     */
    public boolean deleteByPrimaryKey( long id ) throws DaoException {
        return entityDelete( new KeyFactory.Builder( "Partner", id ).getKey() );
    }

    /**
     * Inserts a new record.
     * @return the generated primary key - id
     */
    public long insert( Partner dto ) throws DaoException {
        Entity _ent = new Entity( "Partner");

        {
            if ( dto.getAddedBy() == null ) {
                throw new DaoException("Value of column 'addedBy' cannot be null");
            }
            checkMaxLength( "addedBy", dto.getAddedBy(), 500 );
            _ent.setProperty( "addedBy", dto.getAddedBy());

            if ( dto.getDate() == null ) {
                dto.setDate( new Date( System.currentTimeMillis()));
            }
            _ent.setProperty( "date", date( dto.getDate() ));

            if ( dto.getFirstName() == null ) {
                throw new DaoException("Value of column 'firstName' cannot be null");
            }
            checkMaxLength( "firstName", dto.getFirstName(), 500 );
            _ent.setProperty( "firstName", dto.getFirstName());

            if ( dto.getLastName() == null ) {
                throw new DaoException("Value of column 'lastName' cannot be null");
            }
            checkMaxLength( "lastName", dto.getLastName(), 500 );
            _ent.setProperty( "lastName", dto.getLastName());

            if ( dto.getUserId() == null ) {
                throw new DaoException("Value of column 'userId' cannot be null");
            }
            checkMaxLength( "userId", dto.getUserId(), 500 );
            _ent.setProperty( "userId", dto.getUserId());

            if ( dto.getPosition() == null ) {
                throw new DaoException("Value of column 'position' cannot be null");
            }
            checkMaxLength( "position", dto.getPosition(), 500 );
            _ent.setProperty( "position", dto.getPosition());

            if ( dto.getIpAddress() == null ) {
                throw new DaoException("Value of column 'ipAddress' cannot be null");
            }
            checkMaxLength( "ipAddress", dto.getIpAddress(), 100 );
            _ent.setProperty( "ipAddress", dto.getIpAddress());

            if ( dto.getDisabled() == null ) {
                throw new DaoException("Value of column 'disabled' cannot be null");
            }
            _ent.setProperty( "disabled", dto.getDisabled());

            if ( dto.getNationalId() == null ) {
                throw new DaoException("Value of column 'nationalId' cannot be null");
            }
            checkMaxLength( "nationalId", dto.getNationalId(), 500 );
            _ent.setProperty( "nationalId", dto.getNationalId());

            if ( dto.getNationality() == null ) {
                throw new DaoException("Value of column 'nationality' cannot be null");
            }
            checkMaxLength( "nationality", dto.getNationality(), 500 );
            _ent.setProperty( "nationality", dto.getNationality());

            if ( dto.getHomeAddress() == null ) {
                throw new DaoException("Value of column 'homeAddress' cannot be null");
            }
            checkMaxLength( "homeAddress", dto.getHomeAddress(), 500 );
            _ent.setProperty( "homeAddress", dto.getHomeAddress());

            if ( dto.getState() == null ) {
                throw new DaoException("Value of column 'state' cannot be null");
            }
            checkMaxLength( "state", dto.getState(), 500 );
            _ent.setProperty( "state", dto.getState());

            if ( dto.getPostalCode() == null ) {
                throw new DaoException("Value of column 'postalCode' cannot be null");
            }
            checkMaxLength( "postalCode", dto.getPostalCode(), 500 );
            _ent.setProperty( "postalCode", dto.getPostalCode());

            if ( dto.getCountry() == null ) {
                throw new DaoException("Value of column 'country' cannot be null");
            }
            checkMaxLength( "country", dto.getCountry(), 500 );
            _ent.setProperty( "country", dto.getCountry());

            if ( dto.getPhoneNumber() == null ) {
                throw new DaoException("Value of column 'phoneNumber' cannot be null");
            }
            checkMaxLength( "phoneNumber", dto.getPhoneNumber(), 500 );
            _ent.setProperty( "phoneNumber", dto.getPhoneNumber());

            if ( dto.getHomeNumber() == null ) {
                throw new DaoException("Value of column 'homeNumber' cannot be null");
            }
            checkMaxLength( "homeNumber", dto.getHomeNumber(), 500 );
            _ent.setProperty( "homeNumber", dto.getHomeNumber());

            if ( dto.getEmail() == null ) {
                throw new DaoException("Value of column 'email' cannot be null");
            }
            checkMaxLength( "email", dto.getEmail(), 500 );
            _ent.setProperty( "email", dto.getEmail());

            if ( dto.getPassword() == null ) {
                throw new DaoException("Value of column 'password' cannot be null");
            }
            checkMaxLength( "password", dto.getPassword(), 500 );
            _ent.setProperty( "password", dto.getPassword());

            if ( dto.getBusiness() == null ) {
                _ent.setProperty( "business", null );
            }
            else {
                _ent.setProperty( "business", dto.getBusiness());
            }
        }

        entityPut( _ent, dto, "insert" );

        dto.setId( _ent.getKey().getId());

        return dto.getId();
    }

    /**
     * Updates one record found by primary key.
     * @return true iff the record was really updated (=found and any change was really saved)
     */
    public boolean update( long id, Partner dto ) throws DaoException {
        Entity _ent = entityGet( new KeyFactory.Builder( "Partner", id ).getKey());
        if (_ent == null) return false;

        boolean isUpdated = false;

        if ( dto.getId() != null ) {
            isUpdated = true;
        }

        if ( dto.getAddedBy() != null ) {
            checkMaxLength( "addedBy", dto.getAddedBy(), 500 );
            _ent.setProperty( "addedBy", dto.getAddedBy());
            isUpdated = true;
        }

        if ( dto.getDate() != null ) {
            _ent.setProperty( "date", date( dto.getDate() ));
            isUpdated = true;
        }

        if ( dto.getFirstName() != null ) {
            checkMaxLength( "firstName", dto.getFirstName(), 500 );
            _ent.setProperty( "firstName", dto.getFirstName());
            isUpdated = true;
        }

        if ( dto.getLastName() != null ) {
            checkMaxLength( "lastName", dto.getLastName(), 500 );
            _ent.setProperty( "lastName", dto.getLastName());
            isUpdated = true;
        }

        if ( dto.getUserId() != null ) {
            checkMaxLength( "userId", dto.getUserId(), 500 );
            _ent.setProperty( "userId", dto.getUserId());
            isUpdated = true;
        }

        if ( dto.getPosition() != null ) {
            checkMaxLength( "position", dto.getPosition(), 500 );
            _ent.setProperty( "position", dto.getPosition());
            isUpdated = true;
        }

        if ( dto.getIpAddress() != null ) {
            checkMaxLength( "ipAddress", dto.getIpAddress(), 100 );
            _ent.setProperty( "ipAddress", dto.getIpAddress());
            isUpdated = true;
        }

        if ( dto.getDisabled() != null ) {
            _ent.setProperty( "disabled", dto.getDisabled());
            isUpdated = true;
        }

        if ( dto.getNationalId() != null ) {
            checkMaxLength( "nationalId", dto.getNationalId(), 500 );
            _ent.setProperty( "nationalId", dto.getNationalId());
            isUpdated = true;
        }

        if ( dto.getNationality() != null ) {
            checkMaxLength( "nationality", dto.getNationality(), 500 );
            _ent.setProperty( "nationality", dto.getNationality());
            isUpdated = true;
        }

        if ( dto.getHomeAddress() != null ) {
            checkMaxLength( "homeAddress", dto.getHomeAddress(), 500 );
            _ent.setProperty( "homeAddress", dto.getHomeAddress());
            isUpdated = true;
        }

        if ( dto.getState() != null ) {
            checkMaxLength( "state", dto.getState(), 500 );
            _ent.setProperty( "state", dto.getState());
            isUpdated = true;
        }

        if ( dto.getPostalCode() != null ) {
            checkMaxLength( "postalCode", dto.getPostalCode(), 500 );
            _ent.setProperty( "postalCode", dto.getPostalCode());
            isUpdated = true;
        }

        if ( dto.getCountry() != null ) {
            checkMaxLength( "country", dto.getCountry(), 500 );
            _ent.setProperty( "country", dto.getCountry());
            isUpdated = true;
        }

        if ( dto.getPhoneNumber() != null ) {
            checkMaxLength( "phoneNumber", dto.getPhoneNumber(), 500 );
            _ent.setProperty( "phoneNumber", dto.getPhoneNumber());
            isUpdated = true;
        }

        if ( dto.getHomeNumber() != null ) {
            checkMaxLength( "homeNumber", dto.getHomeNumber(), 500 );
            _ent.setProperty( "homeNumber", dto.getHomeNumber());
            isUpdated = true;
        }

        if ( dto.getEmail() != null ) {
            checkMaxLength( "email", dto.getEmail(), 500 );
            _ent.setProperty( "email", dto.getEmail());
            isUpdated = true;
        }

        if ( dto.getPassword() != null ) {
            checkMaxLength( "password", dto.getPassword(), 500 );
            _ent.setProperty( "password", dto.getPassword());
            isUpdated = true;
        }

        if (!isUpdated) {
            return false;
        }

        entityPut( _ent, dto, "update" );

        return true;
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected Partner fetch( Partner dto, Entity ent ) {
        if ( dto == null ) dto = new Partner();

        dto.setId( ent.getKey().getId());
        dto.setAddedBy( getString( ent, "addedBy" ));
        dto.setDate( getDate( ent, "date" ));
        dto.setFirstName( getString( ent, "firstName" ));
        dto.setLastName( getString( ent, "lastName" ));
        dto.setUserId( getString( ent, "userId" ));
        dto.setPosition( getString( ent, "position" ));
        dto.setIpAddress( getString( ent, "ipAddress" ));
        dto.setDisabled( getBoolean( ent, "disabled" ));
        dto.setNationalId( getString( ent, "nationalId" ));
        dto.setNationality( getString( ent, "nationality" ));
        dto.setHomeAddress( getString( ent, "homeAddress" ));
        dto.setState( getString( ent, "state" ));
        dto.setPostalCode( getString( ent, "postalCode" ));
        dto.setCountry( getString( ent, "country" ));
        dto.setPhoneNumber( getString( ent, "phoneNumber" ));
        dto.setHomeNumber( getString( ent, "homeNumber" ));
        dto.setEmail( getString( ent, "email" ));
        dto.setPassword( getString( ent, "password" ));
        dto.setBusiness( getLong( ent, "business" ));

        return dto;
    }

    protected Partner[] toArray(ArrayList<Partner> list ) {
        Partner[] ret = new Partner[ list.size() ];
        return list.toArray( ret );
    }

}
