/**
  *ServiceManagerLib
  *
  * This file was automatically generated by APIMATIC BETA v2.0 on 12/18/2015
  */

'use strict';
angular.module('ServiceManagerLib').factory('M2shareController',function($q,Configuration,HttpClient,APIHelper){
    return{
        /**
         * TODO: type endpoint description here
         * @param {string} aid    Required parameter: App ID
         * @param {string} origin    Required parameter: Host ID
         * @param {TypeEnum} type    Required parameter: Item type
         * @param {string} uid    Required parameter: User ID
         * @param {ActionEnum|null} action    Optional parameter: Action to be performed on item(s)
         * @param {FilterEnum|null} filter    Optional parameter: Item filter
         * @param {string|null} id    Optional parameter: Item ID
         * @param {int|null} maxPerPage    Optional parameter: Total items per page
         * @param {int|null} pageNumber    Optional parameter: Current page number (start with 1)
         *
         * @return {promise<Movie>}
         */
        getCrud : function(aid, origin, type, uid, action, filter, id, maxPerPage, pageNumber){
            //Assign default values
            aid = aid || "test-local";
            origin = origin || "localhost";
            uid = uid || "test";

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/ws/crud";
            
            //Process query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, {
                "aid" : aid,
                "origin" : origin,
                "type" : (type != null)?type:null,
                "uid" : uid,
                "action" : (action != null)?action:null,
                "filter" : (filter != null)?filter:null,
                "id" : id,
                "maxPerPage" : maxPerPage,
                "pageNumber" : pageNumber
            });

            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json"
            };

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "GET",
                queryUrl : queryUrl,
                headers: headers,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Invalid input", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                }

                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        },
        /**
         * TODO: type endpoint description here
         * @param {string} aid    Required parameter: App ID
         * @param {string} origin    Required parameter: Host ID
         * @param {TypeEnum} type    Required parameter: Item type
         * @param {string} uid    Required parameter: User ID
         * @param {Action14Enum|null} action    Optional parameter: Action to be performed on item(s)
         * @param {string|null} channelPattern    Optional parameter: Channel ID (not used)
         * @param {string|null} description    Optional parameter: Item description/image url
         * @param {string|null} filter    Optional parameter: Item filter e.g. next5
         * @param {string|null} id    Optional parameter: Item ID
         * @param {string|null} name    Optional parameter: Item name
         * @param {string|null} oid    Optional parameter: Owner (Creator) ID
         * @param {string|null} searchResults    Optional parameter: JSONP search results (not used)
         * @param {string|null} shared    Optional parameter: Item is shared or not (not used)
         * @param {string|null} title    Optional parameter: Item title
         * @param {string|null} url    Optional parameter: Item url (YouTube)
         *
         * @return {promise<Movie>}
         */
        createCrud : function(aid, origin, type, uid, action, channelPattern, description, filter, id, name, oid, searchResults, shared, title, url){
            //Assign default values
            aid = aid || "test-local";
            origin = origin || "localhost";
            uid = uid || "test";

            //prepare query string for API call
            var baseUri = Configuration.BASEURI
            var queryBuilder = baseUri + "/ws/crud";
            
            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder);
            
            //prepare headers
            var headers = {
                "accept" : "application/json"
            };

            //prepare form data
            var form = {
                "aid" : aid,
                "origin" : origin,
                "type" : (type != null)?type:null,
                "uid" : uid,
                "action" : (action != null)?action:null,
                "channelPattern" : channelPattern,
                "description" : description,
                "filter" : filter,
                "id" : id,
                "name" : name,
                "oid" : oid,
                "search_results" : searchResults,
                "shared" : shared,
                "title" : title,
                "url" : url
            };

            //Remove null values
            APIHelper.cleanObject(form);

            //prepare and invoke the API call request to fetch the response
            var config = {
                method : "POST",
                queryUrl : queryUrl,
                headers: headers,
                form : form,
            };
            
            var response = HttpClient(config);
                    
            //Create promise to return
            var deffered= $q.defer();
                    
            //process response
            response.then(function(result){
                deffered.resolve(result.body);
            },function(result){
                //Error handling for custom HTTP status codes
                if (code == 400) {
                    deffered.reject(APIHelper.appendContext({errorMessage: "Invalid input", errorCode: 400, errorResponse: result.message},result.getContext()));
                    return;
                }

                deffered.reject(APIHelper.appendContext({errorMessage:"HTTP Response Not OK", errorCode: result.code, errorResponse: result.message},result.getContext()));
            });
            
            return deffered.promise;
        }
    }
});